/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/authentication/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign in a user
         * @description User authentication
         */
        post: operations["signin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authentication/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new user
         * @description User creation is temporarily restricted to a single user per system
         */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description A detailed explanation of the error */
            detail: string;
            /** @description The HTTP status code for the error */
            status: number;
            /** @description A short description of the error */
            title: string;
        };
        AuthenticationToken: {
            data: {
                /** @example authenticationToken */
                type: string;
                attributes: {
                    /**
                     * @description The authentication token for the user
                     * @example token
                     */
                    token: string;
                };
            };
        };
        CreateUser: {
            data: {
                /**
                 * @example createUser
                 * @enum {string}
                 */
                type: "createUser";
                attributes: {
                    /** @description The user's name */
                    name: string;
                    /** @description The user's password */
                    password: string;
                    /** @description The user's username */
                    username: string;
                };
            };
        };
        CreateDetailedUser: {
            data: {
                /** @example createDetailedUser */
                type: string;
                attributes: components["schemas"]["CreateUser"] & {
                    details?: components["schemas"]["CreateUserDetails"];
                    metrics?: components["schemas"]["CreateUserMetrics"];
                };
            };
        };
        CreateUserDetails: {
            data: {
                /** @example createUserDetails */
                type: string;
                attributes: components["schemas"]["UserDetails"];
            };
        };
        CreateUserMetrics: {
            data: {
                /** @example createUserMetrics */
                type: string;
                attributes: components["schemas"]["UserMetrics"];
            };
        };
        DetailedUser: {
            data: {
                /** @example detailedUser */
                type: string;
                attributes: components["schemas"]["User"] & {
                    details?: components["schemas"]["UserDetails"];
                    metrics?: components["schemas"]["UserMetrics"];
                };
            };
        };
        UpdateDetailedUser: {
            data: {
                /** @example updateDetailedUser */
                type: string;
                attributes: components["schemas"]["UpdateUser"] & {
                    details?: components["schemas"]["UpdateUserDetails"];
                    metrics?: components["schemas"]["UpdateUserMetrics"];
                };
            };
        };
        UpdateUser: {
            data: {
                /** @example updateUser */
                type: string;
                attributes: {
                    /** @description The user's avatar */
                    avatar?: string;
                    /** @description The user's name */
                    name?: string;
                    /** @description The user's password */
                    password: string;
                    /** @description The user's username */
                    username?: string;
                };
            };
        };
        UpdateUserDetails: {
            data: {
                /** @example updateUserDetails */
                type: string;
                attributes: components["schemas"]["UserDetails"];
            };
        };
        UpdateUserMetrics: {
            data: {
                /** @example updateUserMetrics */
                type: string;
                attributes: components["schemas"]["UserMetrics"];
            };
        };
        User: {
            data: {
                /** @example user */
                type: string;
                /** @description Unique ID of the user */
                id?: number;
                attributes: {
                    /** @description The user's avatar */
                    avatar: string;
                    /** @description The user's name */
                    name: string;
                    /** @description The user's username */
                    username: string;
                };
            };
        };
        UserCredentials: {
            data: {
                /** @example userCredentials */
                type: string;
                attributes: {
                    /** @example username */
                    username: string;
                    /**
                     * Format: password
                     * @example password
                     */
                    password: string;
                };
            };
        };
        UserDetails: {
            data: {
                /** @example userDetails */
                type: string;
                attributes: {
                    /** @description The user's biography */
                    biography: string;
                };
            };
        };
        UserMetrics: {
            data: {
                /** @example userMetrics */
                type: string;
                attributes: {
                    /** @description The user's total number of answers */
                    answers: string;
                    /** @description The user's total number of questions */
                    questions: string;
                    /** @description The user's total number of views */
                    views: string;
                };
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    signin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User credentials */
        requestBody?: {
            content: {
                "application/vnd.api+json": {
                    data: {
                        /** @example signin */
                        type: string;
                        attributes: components["schemas"]["UserCredentials"];
                    };
                };
            };
        };
        responses: {
            /** @description User signed in successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["AuthenticationToken"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["Error"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["Error"];
                };
            };
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User data */
        requestBody?: {
            content: {
                "application/vnd.api+json": components["schemas"]["CreateUser"];
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["User"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["Error"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.api+json": components["schemas"]["Error"];
                };
            };
        };
    };
}
