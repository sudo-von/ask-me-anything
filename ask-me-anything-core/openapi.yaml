openapi: 3.0.0
info:
  title: ask-me-anything API
  version: 1.0.0
  description: This is the API documentation for the ask-me-anything application.

paths:
  /authentication/signin:
    post:
      summary: Sign in a user
      description: User authentication
      operationId: signin
      requestBody:
        description: User credentials
        content:
          application/vnd.api+json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: object
                  required:
                    - type
                    - attributes
                  properties:
                    type:
                      type: string
                      example: signin
                    attributes:
                      $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: User signed in successfully
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BearerToken"
        "401":
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
  /authentication/signup:
    post:
      summary: Create a new user
      description: |
        Creates a new user account by registering with the provided details. 
        However, it is not required to create an account in order to ask questions, 
        as they can be submitted anonymously.
      operationId: signup
      requestBody:
        description: User data.
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: User and token created successfully.
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/BearerToken"
        "400":
          description: Bad request.
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict.
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Server error.
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Error:
      type: object
      required:
        - detail
        - status
        - title
      properties:
        detail:
          type: string
          description: A detailed explanation of the error
        status:
          type: number
          description: The HTTP status code for the error
        title:
          type: string
          description: A short description of the error

    BearerToken:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - bearerToken
              example: bearerToken
            attributes:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: A Bearer token to authenticate future requests.
    CreateUser:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              enum:
                - createUser
              example: createUser
            attributes:
              type: object
              required:
                - name
                - password
                - username
              properties:
                name:
                  type: string
                  description: The user's name
                password:
                  type: string
                  description: The user's password
                username:
                  type: string
                  description: The user's username
    CreateDetailedUser:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: createDetailedUser
            attributes:
              allOf:
                - $ref: "#/components/schemas/CreateUser"
                - type: object
                  properties:
                    details:
                      $ref: "#/components/schemas/CreateUserDetails"
                    metrics:
                      $ref: "#/components/schemas/CreateUserMetrics"
    CreateUserDetails:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: createUserDetails
            attributes:
              $ref: "#/components/schemas/UserDetails"
    CreateUserMetrics:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: createUserMetrics
            attributes:
              $ref: "#/components/schemas/UserMetrics"
    DetailedUser:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: detailedUser
            attributes:
              allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  properties:
                    details:
                      $ref: "#/components/schemas/UserDetails"
                    metrics:
                      $ref: "#/components/schemas/UserMetrics"
    UpdateDetailedUser:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: updateDetailedUser
            attributes:
              allOf:
                - $ref: "#/components/schemas/UpdateUser"
                - type: object
                  properties:
                    details:
                      $ref: "#/components/schemas/UpdateUserDetails"
                    metrics:
                      $ref: "#/components/schemas/UpdateUserMetrics"
    UpdateUser:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: updateUser
            attributes:
              type: object
              required:
                - password
              properties:
                avatar:
                  type: string
                  description: The user's avatar
                name:
                  type: string
                  description: The user's name
                password:
                  type: string
                  description: The user's password
                username:
                  type: string
                  description: The user's username
    UpdateUserDetails:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: updateUserDetails
            attributes:
              $ref: "#/components/schemas/UserDetails"
    UpdateUserMetrics:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: updateUserMetrics
            attributes:
              $ref: "#/components/schemas/UserMetrics"
    User:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: user
            id:
              type: integer
              description: Unique ID of the user
            attributes:
              type: object
              required:
                - id
                - avatar
                - name
                - username
              properties:
                avatar:
                  type: string
                  description: The user's avatar
                name:
                  type: string
                  description: The user's name
                username:
                  type: string
                  description: The user's username
    UserCredentials:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: userCredentials
            attributes:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: username
                password:
                  type: string
                  format: password
                  example: password
    UserDetails:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: userDetails
            attributes:
              type: object
              required:
                - biography
              properties:
                biography:
                  type: string
                  description: The user's biography
    UserMetrics:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - attributes
          properties:
            type:
              type: string
              example: userMetrics
            attributes:
              type: object
              required:
                - answers
                - questions
                - views
              properties:
                answers:
                  type: string
                  description: The user's total number of answers
                questions:
                  type: string
                  description: The user's total number of questions
                views:
                  type: string
                  description: The user's total number of views
